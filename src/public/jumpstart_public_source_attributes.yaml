# SPDX-FileCopyrightText: 2023 - 2024 Rivos Inc.
#
# SPDX-License-Identifier: Apache-2.0

diag_entry_label: _mmode_start

rivos_internal_build: false

max_num_harts_supported: 4

# Hard limits on how many pages the jumsptart infrastructure itself will occupy.
# Allows us to keep track of infrastructure code size.
# The test pages are not limited by these counts and are dependent on the
# number of pages allocated in the test memory map.
jumpstart_mmode:
  text:
    page_size: 0x1000
    num_pages: 4
    linker_script_section: ".jumpstart.text.mmode.init,.jumpstart.text.mmode,.jumpstart.text.mmode.end"
    pma_memory_type: "wb"
    no_pte_allocation: True
jumpstart_smode:
  text:
    page_size: 0x1000
    num_pages: 3
    xwr: "0b101"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".jumpstart.text.smode.init,.jumpstart.text.smode"
  stack:
    page_size: 0x1000
    num_pages: 4
    xwr: "0b011"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".jumpstart.stack.smode"
  c_structs:
    page_size: 0x1000
    num_pages: 2
    xwr: "0b011"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".jumpstart.c_structs.smode"
  data:
    page_size: 0x1000
    num_pages: 2
    xwr: "0b011"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".jumpstart.data.smode"
  sdata:
    page_size: 0x1000
    num_pages: 1
    xwr: "0b011"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".sdata"
  bss:
    page_size: 0x1000
    xwr: "0b011"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".bss"
  rodata:
    page_size: 0x1000
    xwr: "0b001"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".rodata"
  pagetables:
    page_size: 0x1000
    xwr: "0b001"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".jumpstart.rodata.pagetables"
  heap:
    page_size: 0x200000
    num_pages: 2
    xwr: "0b011"
    umode: "0b0"
    pma_memory_type: "wb"
    linker_script_section: ".jumpstart.smode.heap"
jumpstart_umode:
  text:
    page_size: 0x1000
    num_pages: 1
    xwr: "0b101"
    umode: "0b1"
    pma_memory_type: "wb"
    linker_script_section: ".jumpstart.text.umode"
  stack:
    page_size: 0x1000
    num_pages: 4
    xwr: "0b011"
    umode: "0b1"
    pma_memory_type: "wb"
    linker_script_section: ".jumpstart.stack.umode"


# These attributes can be overriden by the test attributes file or
# at build time.
diag_attributes:
  start_test_in_mmode: false
  num_pages_for_jumpstart_smode_pagetables: 30
  num_pages_for_jumpstart_smode_bss: 7
  num_pages_for_jumpstart_smode_rodata: 1
  allow_page_table_modifications: false
  mmode_start_address: 0x80000000
  # By default smode and umode areas will be placed after the mmode area
  # unless given values by a diag.
  smode_start_address: null
  umode_start_address: null
  active_hart_mask: '0b1'
  satp_mode: 'sv39'
  mappings: null

c_structs:
  thread_attributes:
    fields:
      hart_id: uint8_t
      current_mode: uint8_t
      smode_setup_done: uint8_t
      trap_override_struct_address: uint64_t
      mmode_reg_context_save_region_address: uint64_t
      lower_mode_in_mmode_reg_context_save_region_address: uint64_t
      smode_reg_context_save_region_address: uint64_t
      umode_reg_context_save_region_address: uint64_t
      bookend_magic_number: uint64_t
  trap_override_attributes:
    fields:
      smode_interrupt_handler_overrides: uint64_t,46
      smode_exception_handler_overrides: uint64_t,20
      mmode_interrupt_handler_overrides: uint64_t,46
      mmode_exception_handler_overrides: uint64_t,20

defines:
  THREAD_ATTRIBUTES_BOOKEND_MAGIC_NUMBER_VALUE: 0x3317150533171505
  PAGE_OFFSET: 12
  DIAG_PASSED: 0
  DIAG_FAILED: 1
  # These are the various states that a hart can be in.
  HART_RUNNING: 2
  HART_INACTIVE: 3
  PRIMARY_HART_ID: 0
  CHECKTC_DISABLE: nop
  CHECKTC_ENABLE: nop

syscall_numbers:
  - SYSCALL_RUN_FUNC_IN_UMODE_COMPLETE
  - SYSCALL_RUN_FUNC_IN_SMODE_COMPLETE

# These are the registers that need to be saved/restored when moving
# between U-mode and S-mode. We will generate S and U mode regions to
# hold this context across context switches.
reg_context_to_save_across_modes:
  registers:
    gprs: [sp, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, t0, t1, t2, t3, t4, t5, t6, a0, a1, a2, a3, a4, a5, a6, a7, ra]
    csrs: [sepc, sstatus, mepc, mstatus, hstatus]
  # Temporary register to hold the address of the context save area when
  # saving and restoring.
  temp_register: gp
